Next.js uses file-system routing. This means that instead of using code to define the routes of your application, you can use folders and files.

To understand how Server and Client Components work, it's helpful to be familiar with two foundational web concepts:

The environments your application code can be executed in: the server and the client.
The network boundary that separates server and client code.

The client refers to the browser on a userâ€™s device that sends a request to a server for your application code. It then turns the response 
it receives from the server into an interface the user can interact with.
The server refers to the computer in a data center that stores your application code, receives requests from a client, does some computation, 
and sends back an appropriate response.
Each environment has its own set of capabilities and constraints. For example, by moving rendering and data fetching to the server, you can 
reduce the amount of code sent to the client, which can improve your application's performance. But, as you learned earlier, to make your UI 
interactive, you need to update the DOM on the client.

Therefore, the code you write for the server and the client is not always the same. Certain operations (e.g. data fetching or managing user state)
 are better suited for one environment over the other.

Behind the scenes, the components are split into two module graphs. The server module graph (or tree) contains all the Server Components that 
are rendered on the server, and the client module graph (or tree) contains all Client Components.

After Server Components are rendered, a special data format called the React Server Component Payload (RSC) is sent to the client. 
The RSC payload contains:

The rendered result of Server Components.
Placeholders (or holes) for where Client Components should be rendered and references to their JavaScript files.
React uses this information to consolidate the Server and Client Components and update the DOM on the client.




To run the code -

npm run dev   in the command prompt pointing to the folder.



Installation - https://nextjs.org/learn/react-foundations/installation




To create a new next js project do the following -

create a package.json file in root with empty braces {}
go to terminal and type npm install react react-dom next
this wil install the above packages and make sure the package.json is now having these names.

create a main folder called app and move inside it
create your main file of the project - page.js and add some default codes 


Go to package.json file and  add
"scripts": {
    "dev": "next dev"
  },


  then run in terminal - npm run dev

  naviagate to localhost:3000 in browser.

